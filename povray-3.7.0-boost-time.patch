--- source/backend/scene/view.cpp.orig	2012-08-02 21:04:24.000000000 +0800
+++ source/backend/scene/view.cpp	2012-08-02 21:04:31.000000000 +0800
@@ -1550,7 +1550,7 @@
 	}
 
 	boost::xtime t;
-	boost::xtime_get (&t, boost::TIME_UTC);
+	boost::xtime_get (&t, boost::TIME_UTC_);
 	t.sec += 3;
 
 	// this will cause us to wait until the other threads are done.
--- vfe/vfepovms.cpp.orig	2012-08-02 21:04:46.000000000 +0800
+++ vfe/vfepovms.cpp	2012-08-02 21:04:53.000000000 +0800
@@ -247,7 +247,7 @@
 
     // TODO: have a shorter wait but loop, and check for system shutdown
     boost::xtime t;
-    boost::xtime_get (&t, boost::TIME_UTC);
+    boost::xtime_get (&t, boost::TIME_UTC_);
     t.nsec += 50000000 ;
     m_Event.timed_wait (lock, t);
 
--- vfe/vfesession.cpp.orig	2012-08-02 21:05:01.000000000 +0800
+++ vfe/vfesession.cpp	2012-08-02 21:05:10.000000000 +0800
@@ -967,7 +967,7 @@
   if (WaitTime > 0)
   {
     boost::xtime t;
-    boost::xtime_get (&t, boost::TIME_UTC);
+    boost::xtime_get (&t, boost::TIME_UTC_);
     t.sec += WaitTime / 1000 ;
     t.nsec += (WaitTime % 1000) * 1000000 ;
     m_SessionEvent.timed_wait (lock, t);
@@ -1034,7 +1034,7 @@
   // we can't call pause directly since it will result in a thread context
   // error. pause must be called from the context of the worker thread.
   boost::xtime t;
-  boost::xtime_get (&t, boost::TIME_UTC);
+  boost::xtime_get (&t, boost::TIME_UTC_);
   t.sec += 3 ;
   m_RequestFlag = rqPauseRequest;
   if (m_RequestEvent.timed_wait(lock, t) == false)
@@ -1057,7 +1057,7 @@
   // we can't call resume directly since it will result in a thread context
   // error. it must be called from the context of the worker thread.
   boost::xtime t;
-  boost::xtime_get (&t, boost::TIME_UTC);
+  boost::xtime_get (&t, boost::TIME_UTC_);
   t.sec += 3 ;
   m_RequestFlag = rqResumeRequest;
   if (m_RequestEvent.timed_wait(lock, t) == false)
@@ -1123,7 +1123,7 @@
   m_LastError = vfeNoError;
 
   boost::xtime t;
-  boost::xtime_get (&t, boost::TIME_UTC);
+  boost::xtime_get (&t, boost::TIME_UTC_);
   t.sec += 3 ;
 #ifdef _DEBUG
   t.sec += 120;
